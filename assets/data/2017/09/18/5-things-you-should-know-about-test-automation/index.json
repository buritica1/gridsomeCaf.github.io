{"hash":"68690a39dc8b2d11d797704a1b6f9fe1ac5022d5","data":{"wordPressPost":{"title":"5 things you should know about Test Automation","content":"<p>These days, with the speed and the acceleration that the business world moves at, the software industry has had to overhaul some of its methods, entering a stage where agility of processes and quality of products have become more relevant than ever. One of the practices that allow efficient contribution to the quality assurance of a software product is Test Automation. Although the term is surely familiar to you, it’s worthwhile answering some general questions to reaffirm the importance of carrying out this practice:</p>\n<ol>\n<li><strong> What does Test Automation consist of and what needs to be automated?</strong></li>\n</ol>\n<p>It’s about the use of special software for administering tests automatically that let us determine if the results obtained in the development process of a software product achieve the goals originally laid down. In this way one can administer more tests in less time, as well as facilite those tests whose manual execution is complex, therefore reducing the margin of human error.</p>\n<p>Taking this into account, generally it’s recommended to automate the test cases that are administered repeatedly, those that end up really difficult to do manually and/or those that need a lot of time to be carried out.</p>\n<ol start=\"2\">\n<li><strong> How are the tests designed?</strong></li>\n</ol>\n<p>Firstly let’s start by clarifying that the tests can be designed before or after the software development starts; it all depends on your development process and good practices. Our recommendation is to build the tests before, if the software needs to handle the dynamic in TDD (Test-Driven Development), also for unit tests and BDD (Behavior-Driven Development) – for acceptance tests; but we’ll talk about that in other posts. Continuing with the recommendation then; the first thing to do is design the test, and then code it. Then the functionality to be tested with the already designed and coded test, is then coded (despite the redundancy).</p>\n<p>So taking all this into account, going back to the question and focusing on the test design: for this you must start by reading and abstracting relevant information, verifying and determining what one would hope to happen with the new functionality, and with that as a basis, pose possible scenarios.</p>\n<ol start=\"3\">\n<li><strong> Does Test Automation eradicate the need for manual automation?</strong></li>\n</ol>\n<p>Not necessarily; sometimes we can administer as many manual tests as automated tests in the same Project. It depends on the client, on the resources and on the project, among other variables. Moreover, elements that cannot be tested in an automated way will probably always exist.</p>\n<ol start=\"4\">\n<li><strong> What software is used to carry out Test Automation?</strong></li>\n</ol>\n<p>Different tools exist, but once again the answer is: it depends. The platform or the software that one uses for executing the Test Automation depends on each project and on the programing language under which the application is being developed. Nevertheless, we can state some examples: Cucumber, Selenium, Jasmine, Robot Framework, etc.</p>\n<ol start=\"5\">\n<li><strong> How can your software benefit from Test Automation?</strong></li>\n</ol>\n<p>Let’s start off by saying that with automation it’s much easier to attend to more scenarios, or rather, if you automate a test case, you do it just once and then you can reuse it, making you able to automate many other cases, and in turn giving you a much wider and more complete perspective of the software quality which would not be viable if the tests were carried out manually, as the process would be too long, slow and eventually too expensive. So what does this mean? Better quality of course, since embarking on more scenarios and executing more test cases will allow the product to be evaluated in a more desirable and complete way.</p>\n<p>Furthermore, the test automation will allow you to evaluate the efficiency and functionality of the software continuously, in such a way that you will avoid having to wait for the regression to become aware of any need of adjustment. So while beforehand you had to wait until the end of the process to administer the tests and determine if the software worked as expected, with automation you can carry out this process daily. Remember that repairing a defect in the software when it’s already finished can end up being enormously expensive, so what could be better than having the chance to get to know its true reach, testing it several times along the way. Ultimately test automation significantly decreases the risk, improves the software quality and allows for more efficient management of time and resources. All these factors directly affect and influence the expenditures of your company.</p>\n<p>&nbsp;</p>\n","featuredMedia":{"sourceUrl":"http://cafeto.local:81/wp-content/uploads/2017/09/automation-op2-scaled.jpg","altText":"","mediaDetails":{"width":2560}},"categories":[{"id":"11","title":"Enterprise","path":"/category/enterprise/"}],"tags":[{"id":"23","title":"agile","path":"/tag/agile/"},{"id":"26","title":"automation","path":"/tag/automation/"}]}},"context":{}}